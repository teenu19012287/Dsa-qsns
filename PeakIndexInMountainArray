class Solution {
    public int peakIndexInMountainArray(int[] arr) {
          // Note: Even though the problem statement says that there could be "some" peaks, it only assumes there is only one.
        // The intuition behind this solution is to find the largest number in the array.
        int start = 0;
        int end = arr.length - 1;
        int mid = start + (end - start)/2;
        
        while(start < end){
            // If mid element is greater than (mid + 1) element then we are in descending part of the array
            // Hence move end to mid
            if(arr[mid] > arr[mid + 1]){
                end = mid;
            }
            // If mid element is smaller than (mid + 1) element then we are in ascending part of the array
            // Hence move start to (mid + 1)
            if(arr[mid] < arr[mid + 1]){
                start = mid + 1;
            }
            mid = start + (end - start)/2;
        }
        // Both start and end will point to largest element in array when while loop breaks
        return start;
    }
}
